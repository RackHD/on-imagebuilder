# Local filesystem mounting			-*- shell-script -*-

pre_mountroot()
{
	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-top"
	logger "Running /scripts/local-top"
	run_scripts /scripts/local-top
	[ "$quiet" != "y" ] && log_end_msg
	logger "done"

	# Don't wait for a root device that doesn't have a corresponding
	# device in /dev (ie, mtd0)
	if [ "${ROOT#/dev}" = "${ROOT}" ]; then
		return
	fi

	while [ -z "${FSTYPE}" ]; do
		case $DPKG_ARCH in
			powerpc|ppc64|ppc64el)
				ARCHDELAY=180
				;;
			*)
				ARCHDELAY=30
				;;
		esac
		FSTYPE=$(wait-for-root "${ROOT}" ${ROOTDELAY:-$ARCHDELAY})

		# Load ubi with the correct MTD partition and return since
		# fstype doesn't work with a char device like ubi.
		if [ -n "$UBIMTD" ]; then
			modprobe ubi mtd=$UBIMTD
			return
		fi

		# Run failure hooks, hoping one of them can fix up the system
		# and we can restart the wait loop.  If they all fail, abort
		# and move on to the panic handler and shell.
		if [ -z "${FSTYPE}" ] && ! try_failure_hooks; then
			break
		fi
	done

	# We've given up, but we'll let the user fix matters if they can
	while [ -z "${FSTYPE}" -a ! -e "${ROOT}" ]; do
		# give hint about renamed root
		case "${ROOT}" in
		/dev/hd*)
			suffix="${ROOT#/dev/hd}"
			major="${suffix%[[:digit:]]}"
			major="${major%[[:digit:]]}"
			if [ -d "/sys/block/sd${major}" ]; then
				echo "WARNING bootdevice may be renamed. Try root=/dev/sd${suffix}"
			fi
			;;
		/dev/sd*)
			suffix="${ROOT#/dev/sd}"
			major="${suffix%[[:digit:]]}"
			major="${major%[[:digit:]]}"
			if [ -d "/sys/block/hd${major}" ]; then
				echo "WARNING bootdevice may be renamed. Try root=/dev/hd${suffix}"
			fi
			;;
		esac
		echo "Gave up waiting for root device.  Common problems:"
		echo " - Boot args (cat /proc/cmdline)"
		echo "   - Check rootdelay= (did the system wait long enough?)"
		echo "   - Check root= (did the system wait for the right device?)"
		echo " - Missing modules (cat /proc/modules; ls /dev)"
		logger "ALERT!  ${ROOT} does not exist.  Dropping to a shell!"
		panic "ALERT!  ${ROOT} does not exist.  Dropping to a shell!"
	done
}

mountroot()
{
	pre_mountroot

	# Get the root filesystem type if not set
	if [ -z "${ROOTFSTYPE}" ]; then
		[ -n "${FSTYPE}" ] || FSTYPE=$(blkid -s TYPE -o value "${ROOT}")
		ROOTFSTYPE="${FSTYPE}"
	else
		FSTYPE=${ROOTFSTYPE}
	fi

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-premount"
	logger "Running /scripts/local-premount"
	run_scripts /scripts/local-premount
	[ "$quiet" != "y" ] && log_end_msg
    logger "done"

	if [ "${readonly}" = "y" ] && \
	   [ -z "$LOOP" ]; then
		roflag=-r
	else
		roflag=-w
	fi

	echo
    # Is this necessary?
    modprobe tmpfs
    modprobe squashfs
    modprobe overlay
    mkdir outer
    mount -t tmpfs tmpfs outer # put overlay files into a tmpfs so they don't get blown away on switch_root
    mkdir lower outer/upper outer/work # upper=overlay, lower=base squashfs, work=empty for new command syntax, mount on ${rootmnt}
    CB=$(cat /proc/cmdline)
    CB="${CB##*API_CB=}"
    CB="${CB%% *}"
    BASEFS=$(cat /proc/cmdline)
    BASEFS="${BASEFS##*BASEFS=}"
    BASEFS="${BASEFS%% *}"
    OVERLAYFS=$(cat /proc/cmdline)
    OVERLAYFS="${OVERLAYFS##*OVERLAYFS=}"
    OVERLAYFS="${OVERLAYFS%% *}"
    echo "downloading squashfs from http://${CB}/${BASEFS}"
    logger "downloading squashfs from http://${CB}/${BASEFS}"
    curl http://${CB}/${BASEFS} -o base.squashfs.img
    echo "downloading overlay from http://${CB}/${OVERLAYFS}"
    logger "downloading overlay from http://${CB}/${OVERLAYFS}"
    cd outer/upper
    curl http://${CB}/${OVERLAYFS} | gzip -d -c | cpio -i
    cd ../..
    echo "Mounting base squashfs"
    logger "Mounting base squashfs"
	mount -n -t squashfs -o loop base.squashfs.img lower
    echo "Mounting overlay onto ${rootmnt}"
    logger "Mounting overlay onto ${rootmnt}"
    mount -t overlay overlay -o rw,upperdir=outer/upper,lowerdir=lower,workdir=outer/work ${rootmnt}

    mountroot_status="$?"
    echo "overlay mount complete"
    
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
    logger "Running /scripts/local-bottom"
    run_scripts /scripts/local-bottom
    [ "$quiet" != "y" ] && log_end_msg
    logger "done"
}
